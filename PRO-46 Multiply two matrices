#include <iostream>
void multiplyMatrices(const int mat1[][100], int rows1, int cols1,
                       const int mat2[][100], int rows2, int cols2,
                       int result[][100]) {
    if (cols1 != rows2) {
        std::cout << "Matrices cannot be multiplied. Invalid dimensions." << std::endl;
        return;
    }
    for (int i = 0; i < rows1; ++i) {
        for (int j = 0; j < cols2; ++j) {
            result[i][j] = 0;
            for (int k = 0; k < cols1; ++k) {
                result[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }
}
void displayMatrix(const int mat[][100], int rows, int cols) {
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            std::cout << mat[i][j] << " ";
        }
        std::cout << std::endl;
    }
}
int main() {
    const int maxSize = 100;  
    int mat1[maxSize][maxSize], mat2[maxSize][maxSize], result[maxSize][maxSize];
    int rows1, cols1, rows2, cols2;
    std::cout << "Enter the number of rows for the first matrix: ";
    std::cin >> rows1;
    std::cout << "Enter the number of columns for the first matrix: ";
    std::cin >> cols1;
    std::cout << "Enter the elements for the first matrix:" << std::endl;
    for (int i = 0; i < rows1; ++i) {
        for (int j = 0; j < cols1; ++j) {
            std::cout << "Element (" << i + 1 << ", " << j + 1 << "): ";
            std::cin >> mat1[i][j];
        }
    }
    std::cout << "Enter the number of rows for the second matrix: ";
    std::cin >> rows2;
    std::cout << "Enter the number of columns for the second matrix: ";
    std::cin >> cols2;
    std::cout << "Enter the elements for the second matrix:" << std::endl;
    for (int i = 0; i < rows2; ++i) {
        for (int j = 0; j < cols2; ++j) {
            std::cout << "Element (" << i + 1 << ", " << j + 1 << "): ";
            std::cin >> mat2[i][j];
        }
    }
    multiplyMatrices(mat1, rows1, cols1, mat2, rows2, cols2, result);
    std::cout << "Resultant matrix after multiplication:" << std::endl;
    displayMatrix(result, rows1, cols2);
    return 0;
}
